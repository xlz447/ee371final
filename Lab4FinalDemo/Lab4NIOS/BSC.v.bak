module BSC (en, rst, clk, out);
	input en, rst, clk;
	output [3:0] out;
	wire [3:0] c, nc;
	wire enBar;
	
	not n1 (enBar, en);
	assign c[3] = out[3] & ~out[2] | out[3] & ~out[1] | out[3] & ~out[0] | ~out[3] & out[2] & out[1] & out[0];
	assign c[2] = out[2] & ~out[1] | out[2] & ~out[0] | ~out[2] & out[1] & out[0];
	assign c[1] = ~out[1] & out[0] | out[1] & ~out[0];
	assign c[0] = ~out[0];
	
	DFlipFlop dff0(out[0], nc[0], c[0], clk, enBar | rst);
	DFlipFlop dff1(out[1], nc[1], c[1], clk, enBar | rst);
	DFlipFlop dff2(out[2], nc[2], c[2], clk, enBar | rst);
	DFlipFlop dff3(out[3], nc[3], c[3], clk, enBar | rst);
	
endmodule 

//module tb();
//	reg en, clk, rst;
//	wire [3:0]out;
//	
//	parameter period = 100;
//	
//	initial clk = 0;
//	always #(period /2) clk = ~ clk;
//	
//	BSC bscc (en, rst, clk, out);
//	
//	initial begin
//		rst = 1;
//		#period rst = 0;en = 0;
//		#(5*period); en = 1;
//		#(20*period); en = 0;
//		#period;
//		$stop();
//	end
//	
//endmodule 